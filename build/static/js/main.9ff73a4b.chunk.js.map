{"version":3,"sources":["components/result.js","components/inputBox.js","components/footer.js","components/title.js","components/description.js","App.js","serviceWorker.js","index.js"],"names":["Result","props","status","className","error","data","InputBox","state","url","selector","fetchedData","handleChange","bind","handleSubmit","event","this","setState","target","name","value","preventDefault","Postdata","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","catch","onSubmit","placeholder","type","id","required","onChange","align","React","Component","Footer","href","Title","Description","style","color","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wOAuCeA,EArCA,SAAAC,GAEb,OAAqB,IAAjBA,EAAMC,OAEN,oCACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,QACf,yBAAKA,UAAU,QACf,yBAAKA,UAAU,SAGjB,yBAAKA,UAAU,QAAf,qBAIqB,KAAhBF,EAAMG,MAEb,yBAAKD,UAAU,aACb,iDACA,2GACA,4DAKsB,IAAjBF,EAAMC,QAAmC,KAAfD,EAAMI,KAEvC,yBAAKF,UAAU,UACb,8CACA,yBAAKA,UAAU,cAAcF,EAAMI,OAK7B,MCjCOC,E,kDACnB,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IAEDM,MAAQ,CACXC,IAAK,GACLC,SAAU,GACVL,MAAO,GACPF,QAAQ,EACRQ,YAAa,IAIf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAbH,E,yDAgBNE,GACXC,KAAKC,SAAL,eAAiBF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,U,mCAGvCL,GAAQ,IAAD,OAClBA,EAAMM,iBACNL,KAAKC,SAAS,CAAEd,QAAQ,EAAME,MAAO,KAGrC,IAAMiB,EAAW,CAAEb,IAAKO,KAAKR,MAAMC,IAAKC,SAAUM,KAAKR,MAAME,UAE7Da,MAAM,wCAAyC,CAC7CC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,8BAA+B,mBAC/B,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUP,KAEpBQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAxB,GAAI,OAAI,EAAKW,SAAS,CAAEd,QAAQ,EAAOQ,YAAaL,OACzD2B,OAAM,SAAA5B,GAAK,OAAI,EAAKY,SAAS,CAAEZ,MAAOA,EAAOF,QAAQ,S,+BAIxD,OACE,yBAAKC,UAAU,YACb,0BAAM8B,SAAUlB,KAAKF,cACnB,yBAAKV,UAAU,kBACb,2BAAOA,UAAU,cAAjB,SACA,2BACEA,UAAU,aACV+B,YAAY,yBACZC,KAAK,OACLC,GAAG,MACHlB,KAAK,MACLmB,UAAQ,EACRC,SAAUvB,KAAKJ,gBAInB,yBAAKR,UAAU,cAAcoC,MAAM,UACjC,2BAAOpC,UAAU,SAASgC,KAAK,SAAShB,MAAM,YAIlD,kBAAC,EAAD,CACEd,KAAMU,KAAKR,MAAMG,YACjBR,OAAQa,KAAKR,MAAML,OACnBE,MAAOW,KAAKR,MAAMH,a,GAnEUoC,IAAMC,WCU7BC,EAXA,WACb,OACE,yBAAKvC,UAAU,UACb,2CACY,uBAAGwC,KAAK,yBAAyB1B,OAAO,OAAxC,mBCIH2B,EARD,WACZ,OACE,yBAAKzC,UAAU,SACb,+CCOS0C,EAVK,WAClB,OACE,yBAAK1C,UAAU,gBACb,6CACA,sEACA,uBAAG2C,MAAO,CAACC,MAAO,QAAlB,qHCaSC,MAbf,WACE,OACE,oCACE,yBAAK7C,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,Q,MCHc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,iB","file":"static/js/main.9ff73a4b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Result = props => {\r\n  // Status state is used to show the loading bar when \"Fetch\" button is clicked.\r\n  if (props.status === true) {\r\n    return (\r\n      <>\r\n        <div className=\"load-bar\">\r\n          <div className=\"bar\"></div>\r\n          <div className=\"bar\"></div>\r\n          <div className=\"bar\"></div>\r\n        </div>\r\n\r\n        <div className=\"text\">Fetching Data...</div>\r\n      </>\r\n    );\r\n    // If server responds with an error.\r\n  } else if (props.error !== \"\") {\r\n    return (\r\n      <div className=\"error-box\">\r\n        <p>An Error Occured. </p>\r\n        <p>Please check your URL and Selector. This app does not works on all websites.</p>\r\n        <p>Try it with another website</p>\r\n\r\n      </div>\r\n    );\r\n    // Final result when data has been fetched successfuly.\r\n  } else if (props.status === false && props.data !== \"\") {\r\n    return (\r\n      <div className=\"result\">\r\n        <h2>Scraped Emails</h2>\r\n        <div className=\"result-box\">{props.data}</div>\r\n      </div>\r\n    );\r\n  }\r\n  // Null is needed by React to render properly. It throws an error if \"null\" is not returned\r\n  else return null;\r\n};\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport Result from \"./result.js\";\r\n\r\nexport default class InputBox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      url: \"\",\r\n      selector: \"\",\r\n      error: \"\",\r\n      status: false,\r\n      fetchedData: \"\"\r\n    };\r\n\r\n    // Binds this to the event handlers\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.setState({ status: true, error: \"\" }); // Used to show loading bar\r\n\r\n    // Fetch POST request to the Express Backend\r\n    const Postdata = { url: this.state.url, selector: this.state.selector };\r\n    //Change fetch url when deploying app\r\n    fetch(\"http://findemails.herokuapp.com/fetch\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"http://ptsv2.com\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(Postdata)\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => this.setState({ status: false, fetchedData: data }))\r\n      .catch(error => this.setState({ error: error, status: false }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"inputBox\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"inputContainer\">\r\n            <label className=\"inputLabel\">URL: </label>\r\n            <input\r\n              className=\"inputField\"\r\n              placeholder=\"http://www.example.com\"\r\n              type=\"text\"\r\n              id=\"url\"\r\n              name=\"url\"\r\n              required\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"button_cont\" align=\"center\">\r\n            <input className=\"button\" type=\"submit\" value=\"Fetch\" />\r\n          </div>\r\n        </form>\r\n\r\n        <Result\r\n          data={this.state.fetchedData}\r\n          status={this.state.status}\r\n          error={this.state.error}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer\">\r\n      <p>\r\n        Made By Â© <a href=\"https://rajasgandhi.me\" target=\"top\">Rajas Gandhi</a>\r\n      </p>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div className=\"title\">\r\n      <h1>Email Scraper</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\n\r\nconst Description = () => {\r\n  return (\r\n    <div className=\"instructions\">\r\n      <h2>Instructions:</h2>\r\n      <h3>Input a url and press the fetch button</h3>\r\n      <p style={{color: \"red\"}}>Please Note: This app can only scrape text and it might not work on all the webpages due to them blocking bots.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Description;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport InputBox from \"./components/inputBox.js\";\r\nimport Footer from \"./components/footer.js\";\r\nimport Title from \"./components/title.js\";\r\nimport Description from \"./components/description.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <Title />\r\n        <Description />\r\n        <InputBox />\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App.js\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}